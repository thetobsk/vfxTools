"""

Put this on the shelf:
    
import aovSettings
reload(aovSettings)

aovSettings.aovSettings()


To do:
Make it support AOVs with namespaces.
Fails because the character ':' can't be added into the extra attributes in AOV_settings.
"""

# Set the enabled AOVs to a particular list
# Made by Toby Sanderson and Mark Bailey 2018

import maya.cmds as cmds

def setupAOV():

    import mtoa.aovs as aovs
    #### Define list of preferred AOVs with names *EXACTLY* as they appear in the Render Settings window...
    def setPref():
        global AOVpref
        AOVpref = "AO", "N", "P", "UV", "Z", "coat", "crypto_material", "crypto_object", "diffuse_albedo", "diffuse_direct", "diffuse_indirect", "emission", "motionvector", "shadow_matte", "specular_direct", "specular_indirect", "sss", "transmission", "volume", "L_hdr", "L_key", "L_rim", "L_fill"

    #### Turn all the current AOVs off...
    def allOff():
        allNiceNames = []
        deactivated = []
        allCurrentAOV = cmds.ls("*aiAOV_*")
        for AOV in allCurrentAOV:
            AOV = str(AOV)
            command = AOV + ".enabled"
            cmds.setAttr(command, 0)
            niceName = AOV[6:]
            allNiceNames.append(niceName)

            if niceName not in AOVpref: # Deactivate any active but unwanted AOVs
                deactivated.append(niceName)
                aovs.AOVInterface().removeAOV(niceName)

        if not allNiceNames:
            print "All AOVs were previously deactivated!"
        else:
            print "These are the AOVs you originally had: ", allNiceNames
        if deactivated:
            print "These AOVs were deactivated because they aren't on the list: ", deactivated

    #### Turn the preferred set of AOVs on...
    def prefOn():
        AOVerror = []
        for AOV in AOVpref:
            command = "aiAOV_" + AOV + ".enabled"
            try:
                cmds.setAttr(command, 1)
            except:
                try:
                    aovs.AOVInterface().addAOV(AOV)
                except:
                    AOVerror.append(AOV)

        #cmds.setAttr("aiAOV_AO.enabled", 0) # Ambient Occlusion AOV off by default
        cmds.setAttr("aiAOV_volume.enabled", 0) # Volume AOV off by default

        if AOVerror:
            from maya import OpenMaya
            print "These AOVs couldn't be switched on: ", AOVerror
            OpenMaya.MGlobal.displayError("Something didn't work right, see the script editor for details...")

        else:
            print "Complete: The list of preferred AOVs has been turned on, and everything else switched off!",
            
    ### Create and connect the nodes needed for the UV AOV...
    def createUV():
        # Check if the nodes exist already
        if cmds.objExists("green_ramp") or cmds.objExists("red_ramp"):
            try:
                cmds.defaultNavigation(source="green_ramp", destination="aiAOV_UV.defaultValue", ce=True)
                print "Complete! If this hasn't worked, delete the STMap nodes from the Node Editor and try again.",
            except:
                print "Looks like there's been an error. Try deleting the STMap nodes from the Node Editor and running again.",
    
        else:
            # Create Green Ramp
            cmds.shadingNode('ramp', name="green_ramp", asTexture=True)
            cmds.shadingNode('place2dTexture', name="place2dTexture_Green", asUtility=True)
            cmds.setAttr("green_ramp.colorEntryList[1].color", 0, 0, 0, type="double3")
            cmds.setAttr("green_ramp.colorEntryList[2].color", 0, 1, 0, type="double3")
            cmds.setAttr("green_ramp.colorEntryList[2].position", 1)
            
            # Create Red Ramp
            cmds.shadingNode('ramp', name="red_ramp", asTexture=True)
            cmds.shadingNode('place2dTexture', name="place2dTexture_Red", asUtility=True)
            cmds.setAttr("red_ramp.colorEntryList[1].color", 0, 0, 0, type="double3")
            cmds.setAttr("red_ramp.colorEntryList[2].color", 1, 0, 0, type="double3")
            cmds.setAttr("red_ramp.colorEntryList[2].position", 1)
            cmds.setAttr("place2dTexture_Red.rotateUV", 90)
            
            # Hook it up
            cmds.connectAttr("place2dTexture_Green.outUV", "green_ramp.uvCoord")
            cmds.connectAttr("place2dTexture_Green.outUvFilterSize", "green_ramp.uvFilterSize")
            cmds.connectAttr("place2dTexture_Red.outUV", "red_ramp.uvCoord")
            cmds.connectAttr("place2dTexture_Red.outUvFilterSize", "red_ramp.uvFilterSize")
            cmds.connectAttr("red_ramp.outColor", "green_ramp.colorOffset", force=True)
            
            # Connect it to the UV AOV
            cmds.defaultNavigation(source="green_ramp", destination="aiAOV_UV.defaultValue", ce=True)
            
            print "UV STmap setup complete!",

    #### Run the script
    setPref()
    allOff()
    prefOn()
    createUV()

    # Hook up the Cryptomatte AOVs
    if not cmds.objExists("_aov_cryptomatte"):
       cmds.shadingNode('cryptomatte', name="_aov_cryptomatte", asUtility=True)
    if not cmds.objExists("aiAOV_crypto_object"):
       cmds.shadingNode('aiAOV', name="aiAOV_crypto_object", asTexture=True)
    if not cmds.objExists("aiAOV_crypto_material"):
       cmds.shadingNode('aiAOV', name="aiAOV_crypto_material", asTexture=True)
    cmds.connectAttr('_aov_cryptomatte.outColor', 'aiAOV_crypto_material.defaultValue')
    cmds.connectAttr('_aov_cryptomatte.outColor', 'aiAOV_crypto_object.defaultValue')

    # Hook up the lightGroup things
    cmds.setAttr("aiAOV_L_key.lightPathExpression", "C.*<L.'key'>", type="string")
    cmds.setAttr("aiAOV_L_rim.lightPathExpression", "C.*<L.'rim'>", type="string")
    cmds.setAttr("aiAOV_L_hdr.lightPathExpression", "C.*<L.'hdr'>", type="string")
    cmds.setAttr("aiAOV_L_fill.lightPathExpression", "C.*<L.'fill'>", type="string")
    #cmds.setAttr("aiAOV_shadow_hdr", "C.*<L.'hdr'>", type="string")

    # Hook up the Ambient Occlusion things
    if not cmds.objExists("ambientOcclusion_AOV"):
        cmds.shadingNode('aiAmbientOcclusion', name="ambientOcclusion_AOV", asTexture=True)
    cmds.setAttr('ambientOcclusion_AOV.samples', 5)
    cmds.setAttr('ambientOcclusion_AOV.farClip', 200)
    cmds.connectAttr('ambientOcclusion_AOV.outColor', 'aiAOV_AO.defaultValue')

def aovSettings(): 
    
    allAOVs = []
    allAOVnames = []
    AOV_SettingsExists = []
    
    wordIn = "aiAOV_"

    def loadSettings():
        # Check if AOV Settings are in scene already, and create them if not
        if cmds.objExists("AOV_Settings"):
            print "Existing AOV_Settings found in scene..."
            AOV_SettingsExists = True
        else:
            cmds.spaceLocator(n="AOV_Settings") # "Locator"
            print "No AOV_Settings found in the scene... created some for you."
            AOV_SettingsExists = False
    
    def saveCurrentState():
        cmds.select("AOV_Settings")
        if cmds.listAttr(ud = True):
            print "Updating the attributes..."
            # The Locator alrerady has some saved settings
            settingsExist()
        else:
            print "No custom attributes found. Creating them..."
            # The Locator doesn't have any saved settings
            settingsNew()
    
        print "These were the AOVs previously switched on: ", aovOn
        print "These were the AOVs previously switched off: ", aovOff
    
    def settingsNew():
        # The Locator doesn't have any saved settings
        allAOVnames = cmds.ls("*" + wordIn + "*")
        for x in allAOVnames:
            allAOVs.append(x)
            AOVenabled = cmds.getAttr( x + ".enabled")
    
            if AOVenabled == True:
               #aovOn.append(x)
               cmds.select("AOV_Settings")
               cmds.addAttr("AOV_Settings", ln= x, at="bool", defaultValue= 1)
    
            else:
               #aovOff.append(x)
               cmds.select("AOV_Settings")
               cmds.addAttr("AOV_Settings", ln= x, at="bool", defaultValue= 0)
    
    def settingsExist():
        # The Locator already has some saved settings
        allAOVnames = cmds.ls("*aiAOV_*")
           
        for aov in allAOVnames:
            if cmds.getAttr( aov + ".enabled") == True:
                cmds.setAttr("AOV_Settings."+aov, 1) 
                        
        for aov in allAOVnames:
            if cmds.getAttr( aov + ".enabled") == False:
                cmds.setAttr("AOV_Settings."+aov, 0)
                
    def getCurrentState(allAOVnames):
        # Gets the current state of the AOVs 
        for each in allAOVnames:
            if cmds.getAttr( each + ".enabled") == True:
                aovOn.append(each)  
            
        for each in allAOVnames:
            if cmds.getAttr( each + ".enabled") == False:
                aovOff.append(each)
        return

    
    #### START HERE ########################

    aovOn = []
    aovOff = []
    aovNamespaces = []
    aovNamespaces = cmds.ls("*aiAOV_*", r=True)

    aovNamespaces = [i for i in aovNamespaces if ":" in i]
    if aovNamespaces:
        print "Warning, these AOVs have namespaces: "+ str(aovNamespaces)

    choose = cmds.confirmDialog( title='Change AOV Settings', message='Select one of the following options...', button=['Setup Defaults','ALL OFF','ALL ON','Save State','Restore','Cancel'], defaultButton='Setup Defaults', cancelButton='Cancel', dismissString='No' )

    allAOVnames = cmds.ls("*aiAOV_*", r=True)

    #### SETUP DEFAULTS ###################
    if choose == 'Setup Defaults':
        setupAOV()
        print "Default AOVs created!",

    #### ALL OFF ###########################
    elif choose == 'ALL OFF':
        loadSettings()
        getCurrentState(allAOVnames)
        saveCurrentState()        

        for y in aovOn:
            y = str(y)
            cmds.setAttr(y + ".enabled", 0)
            
        print "All AOVs have now been turned OFF!",

    #### ALL ON ############################
    elif choose == 'ALL ON':
        loadSettings()
        getCurrentState(allAOVnames)
        saveCurrentState()


        for x in aovOff:
            x = str(x)
            cmds.setAttr(x + ".enabled", 1)
            
        print "All AOVs have now been turned ON!",

    #### RESTORE ###########################
    # Load the last saved settings from the Locator
    elif choose == 'Restore':

        loadSettings()
        getCurrentState(allAOVnames)
        
        if aovNamespaces:
            cmds.warning( "Warning, these aovs have namespaces :"+ str(aovNamespaces) )  
            cmds.confirmDialog( title='Restore failure', message='aiAOVs with namespaces are not restorable.\nPlease configure manually.', button=['OK'], defaultButton='OK', cancelButton='No', dismissString='No' )
            
        restoreOn = []
        restoreOff = []

        cmds.select("AOV_Settings")
        allSceneAOV = (cmds.listAttr(ud= True))                 # All user-defined attributes stored in the Locator

        if allSceneAOV == False:
            print "Error - no previous set-up found in the Locator",# If there are no user attributes on Locator

        else:
            for each in allSceneAOV:                          # For each user-defined Locator
               each = str(each)
               attrName = "AOV_Settings." + each
               fullName = each + ".enabled"                    # Convert unicode to string and add .enabled
               getState = cmds.getAttr(attrName)                # Get state (0 or 1)
               if getState == 1:                            # If the attribute has a value of 1 (it was previously on)
                  print "This was ON: ", each
                  restoreOn.append(each)                     # Add to restoreOn list
                  cmds.setAttr(fullName, 1)                   # Turn them on
               else:                                      # If the attribute has a value of 0 (it was previously off)
                  print "This was OFF: ", each
                  restoreOff.append(each)                    # Add to restoreOff list
                  cmds.setAttr(fullName, 0)                   # Turn them off

        print "All AOVs have been restored to their last saved state.",


    #### SAVE ################################
    elif choose == 'Save State':
        loadSettings()
        getCurrentState(allAOVnames)
        saveCurrentState()
        print "Current AOV state saved! Use 'Restore' to revert any subsequent changes.",


    #### CANCEL ##############################
    else:
        print "Cancelled: Nothing was changed.",

############### Toby Sanderson and Mark Bailey 2018 ################# 

# END #
